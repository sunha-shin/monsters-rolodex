{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBACIC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACP,mCAAOL,EAAMI,QAAQE,KAArB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCLKC,G,MAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GACL,qBAAKC,UAAU,YAAf,SACFD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLlBQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACId,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCuCHG,E,kDAzCb,aAAe,IAAD,8BACZ,gBAiBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAhBrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDAWd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAQ3C,WAAS,IAAD,EAC4BC,KAAKN,MAA/Bb,EADF,EACEA,SAAUU,EADZ,EACYA,YAGZU,EAAmBpB,EAASqB,QAAO,SAAA5B,GAAO,OAAIA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAEpG,OACE,sBAAKhC,UAAU,MAAf,UACA,kDACE,cAAC,EAAD,CACEa,YAAY,kBACZC,aAAce,KAAKf,eACrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAnCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dd6d96a9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img \r\n            alt=\"monster\" \r\n            src={`https://robohash.org/${props.monster.id}?set=set2`}/>\r\n        <h2> { props.monster.name } </h2>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n)","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport  './card-list.styles.css';\r\n\r\nexport const CardList = (props) => {\r\n    console.log(props);\r\n    return <div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster}/>\r\n            ))}     \r\n    </div>;\r\n}","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n    />\r\n);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() { // lifecyle method we can access\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users}));\n    // users == array\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n\n  render(){\n    const { monsters, searchField } = this.state;\n    // pulling same value and setting them to those variobles\n    // const monsters = this.state.monsters --> same way\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className='App'>\n      <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder='search monsters'\n          handleChange={this.handleChange}/>\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}